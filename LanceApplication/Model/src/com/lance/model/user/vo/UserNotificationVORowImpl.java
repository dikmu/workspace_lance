package com.lance.model.user.vo;

import com.zngh.platform.front.core.model.BaseEntityImpl;
import com.zngh.platform.front.core.model.BaseViewRowImpl;

import com.zngh.platform.front.core.model.cache.AuthCache;

import java.math.BigDecimal;

import java.sql.Timestamp;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 24 12:05:31 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class UserNotificationVORowImpl extends BaseViewRowImpl {
    public static final int ENTITY_USERNOTIFICATIONEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Uuid,
        Title,
        Content,
        UserName,
        Type,
        Read,
        CreateBy,
        CreateOn,
        ModifyBy,
        ModifyOn,
        Version,
        DisplayName;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int UUID = AttributesEnum.Uuid.index();
    public static final int TITLE = AttributesEnum.Title.index();
    public static final int CONTENT = AttributesEnum.Content.index();
    public static final int USERNAME = AttributesEnum.UserName.index();
    public static final int TYPE = AttributesEnum.Type.index();
    public static final int READ = AttributesEnum.Read.index();
    public static final int CREATEBY = AttributesEnum.CreateBy.index();
    public static final int CREATEON = AttributesEnum.CreateOn.index();
    public static final int MODIFYBY = AttributesEnum.ModifyBy.index();
    public static final int MODIFYON = AttributesEnum.ModifyOn.index();
    public static final int VERSION = AttributesEnum.Version.index();
    public static final int DISPLAYNAME = AttributesEnum.DisplayName.index();

    /**
     * This is the default constructor (do not remove).
     */
    public UserNotificationVORowImpl() {
    }

    /**
     * Gets UserNotificationEO entity object.
     * @return the UserNotificationEO
     */
    public BaseEntityImpl getUserNotificationEO() {
        return (BaseEntityImpl) getEntity(ENTITY_USERNOTIFICATIONEO);
    }

    /**
     * Gets the attribute value for UUID using the alias name Uuid.
     * @return the UUID
     */
    public String getUuid() {
        return (String) getAttributeInternal(UUID);
    }

    /**
     * Sets <code>value</code> as attribute value for UUID using the alias name Uuid.
     * @param value value to set the UUID
     */
    public void setUuid(String value) {
        setAttributeInternal(UUID, value);
    }

    /**
     * Gets the attribute value for TITLE using the alias name Title.
     * @return the TITLE
     */
    public String getTitle() {
        return (String) getAttributeInternal(TITLE);
    }

    /**
     * Sets <code>value</code> as attribute value for TITLE using the alias name Title.
     * @param value value to set the TITLE
     */
    public void setTitle(String value) {
        setAttributeInternal(TITLE, value);
    }

    /**
     * Gets the attribute value for CONTENT using the alias name Content.
     * @return the CONTENT
     */
    public String getContent() {
        return (String) getAttributeInternal(CONTENT);
    }

    /**
     * Sets <code>value</code> as attribute value for CONTENT using the alias name Content.
     * @param value value to set the CONTENT
     */
    public void setContent(String value) {
        setAttributeInternal(CONTENT, value);
    }

    /**
     * Gets the attribute value for USER_NAME using the alias name UserName.
     * @return the USER_NAME
     */
    public String getUserName() {
        return (String) getAttributeInternal(USERNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for USER_NAME using the alias name UserName.
     * @param value value to set the USER_NAME
     */
    public void setUserName(String value) {
        setAttributeInternal(USERNAME, value);
    }

    /**
     * Gets the attribute value for TYPE using the alias name Type.
     * @return the TYPE
     */
    public String getType() {
        return (String) getAttributeInternal(TYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for TYPE using the alias name Type.
     * @param value value to set the TYPE
     */
    public void setType(String value) {
        setAttributeInternal(TYPE, value);
    }

    /**
     * Gets the attribute value for READ using the alias name Read.
     * @return the READ
     */
    public String getRead() {
        return (String) getAttributeInternal(READ);
    }

    /**
     * Sets <code>value</code> as attribute value for READ using the alias name Read.
     * @param value value to set the READ
     */
    public void setRead(String value) {
        setAttributeInternal(READ, value);
    }

    /**
     * Gets the attribute value for CREATE_BY using the alias name CreateBy.
     * @return the CREATE_BY
     */
    public String getCreateBy() {
        return (String) getAttributeInternal(CREATEBY);
    }

    /**
     * Gets the attribute value for CREATE_ON using the alias name CreateOn.
     * @return the CREATE_ON
     */
    public Timestamp getCreateOn() {
        return (Timestamp) getAttributeInternal(CREATEON);
    }

    /**
     * Gets the attribute value for MODIFY_BY using the alias name ModifyBy.
     * @return the MODIFY_BY
     */
    public String getModifyBy() {
        return (String) getAttributeInternal(MODIFYBY);
    }

    /**
     * Gets the attribute value for MODIFY_ON using the alias name ModifyOn.
     * @return the MODIFY_ON
     */
    public Timestamp getModifyOn() {
        return (Timestamp) getAttributeInternal(MODIFYON);
    }

    /**
     * Gets the attribute value for VERSION using the alias name Version.
     * @return the VERSION
     */
    public BigDecimal getVersion() {
        return (BigDecimal) getAttributeInternal(VERSION);
    }

    /**
     * Gets the attribute value for the calculated attribute DisplayName.
     * @return the DisplayName
     */
    public String getDisplayName() {
        return AuthCache.getUserDisplayNameByUserId(getCreateBy());
//        return (String) getAttributeInternal(DISPLAYNAME);
    }
}

